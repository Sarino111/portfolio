'use strict'


const SECTION_MAP = {
    one: 'Pitch',
    two: 'Cornerstone',
    three: 'Experience',
    
  }


const SECTIONS = Object.keys(SECTION_MAP)

const NAVIGATION_ID = 'section-nav'
const NAVIGATION_BULLET = 'nav-bullet'
const TABBING_CLASSNAME = 'is-tabbing'
const HEADER_COMPACT = 'isHeaderCompact'
const SECTION_SELECTOR = '[data-section]'
const CURRENT_SECTION = 'currentSection'

 const [getSections] = [
    () => Array.from(document.querySelectorAll( SECTION_SELECTOR )),
  ]


  console.log( window.document.documentElement );


  
function goToSection(store, opts) {
    let { node: sectionNode, modifier, smooth = true, focus = true } = opts
  
    if (!sectionNode) return
    const sections = getSections()
    const app = document.getElementById('app')
  
    const getSectionId = () => sectionNode.dataset.section
    const curSectionIndex = sections.findIndex(({ dataset }) => {
      return dataset.section === getSectionId()
    })
  
    const findSection = (idx = 0) => sections[curSectionIndex + idx]
    // determine what section to go to based on the modifier.
    if (modifier == 'next') {
      sectionNode = findSection(1)
    } else if (modifier == 'previous') {
      sectionNode = findSection(-1)
    }
  
    if (!sectionNode) return
    setTimeout(() => {
      // Add a `scrolled` className so we know not to
      // animate all the items in the section again.
      sectionNode.classList.add('scrolled')
    }, 1000)
  
    if (smooth) smoothScroll(sectionNode.offsetTop)
    else scrollTo(0, sectionNode.offsetTop)
  
    setTimeout(() => {
      store && store.commit(CURRENT_SECTION, getSectionId())
      app.dataset[CURRENT_SECTION] = getSectionId()
  
      if (focus) {
        // If there's a focusable node in the current section,
        // bring focus to that node, otherwise, restore focus to the navigation.
        const navigationEl = document.getElementById(NAVIGATION_ID)
        const nodeToFocus = !getFirstFocusableNode(sectionNode)
          ? getFirstFocusableNode(navigationEl)
          : sectionNode
  
        if (nodeToFocus === null) return
        nodeToFocus.focus()
      }
    }, 200)
}




/**
     * Hijack scrolling.
     * @param {Event} event
     * @return {void}
     */
 function maybeScrollJack(event) {
  if (this.isMediumScreen || !event) return

  const SPACEBAR = [' ', 'Spacebar']
  const isCommandKey = () => isMacintosh() && event.metaKey
  const downwardKeys = [
    'Down',
    ...SPACEBAR,
    'ArrowDown',
    'Right',
    'PageDown',
    'ArrowRight',
  ]
  const upwardKeys = ['Up', 'ArrowUp', 'Left', 'PageUp', 'ArrowLeft']
  const isScrollableElemFocused = this.scrollableElems.includes(
    event.target
  )

  const inEventPath = predicate =>
    getEventPath(event)
      .filter(el => el instanceof HTMLElement)
      .some(predicate)

  const isNavFocused = inEventPath(el => el && el.id === NAVIGATION_ID)
  const isSectionFocused = inEventPath(el => el && el.dataset.section)
  const isFormFocused = inEventPath(el => el && el.tagName === 'FORM')

  if (
    isFormFocused ||
    this.scrollingLudicrouslyFast(500) ||
    !(isNavFocused || isSectionFocused || isScrollableElemFocused)
  ) {
    return // ...do not scroll!
  }

  if (downwardKeys.includes(event.key)) {
    event.preventDefault()
    isCommandKey() ? this.goToLastSection() : this.goToNextSection()
  } else if (upwardKeys.includes(event.key)) {
    event.preventDefault()
    isCommandKey() ? this.goToFirstSection() : this.goToPrevSection()
  } else if (event.key === 'Home') {
    event.preventDefault()
    this.goToFirstSection()
  } else if (event.key === 'End') {
    event.preventDefault()
    this.goToLastSection()
  }
}


// function render() {
// const { isSectionHidden, announcement } = this
// const [une, deux, trois, quatre, cinq] = SECTIONS

// return (
//   <ContentView id="homepage" announcement={announcement} readAnnouncement>
//     <PitchSlate name={une} aria-hidden={isSectionHidden(une)} />
//     <Cornerstone name={deux} aria-hidden={isSectionHidden(deux)} />
//     <Experience name={trois} aria-hidden={isSectionHidden(trois)} />
//     <Carriageway name={quatre} aria-hidden={isSectionHidden(quatre)} />
//     <Contact name={cinq} aria-hidden={isSectionHidden(cinq)} />
//   </ContentView>
// )
// }
